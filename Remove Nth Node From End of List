Question:
Given the head of a linked list, remove the nth node from the end of the list and return its head.
Example 1:
Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]
Example 2:
Input: head = [1], n = 1
Output: []
Example 3:
Input: head = [1,2], n = 1
Output: [1]
Constraints:
- The number of nodes in the list is sz.
- 1 <= sz <= 30
- 0 <= Node.val <= 100
- 1 <= n <= sz

Solution:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if(head == null){
            return null;
        }
        ListNode temp1 = head;
        ListNode temp2 = head;
        int count = 0;
        while(temp1 != null)
        {
            count++;
            temp1 = temp1.next;
        }
        int required = count - n;
        temp1 = head;
        boolean end = false;
        while(true)
        {
            if(required == 0)
            {
                if(temp1 == head)
                {
                    temp2 = temp2.next;
                    temp1.next = null;
                    head = temp2;
                    break;
                }
                else {
                temp2.next = temp1.next;
                temp1.next = null;
                break;
                }
            }
            required--;
            if(end)
            {
                temp2 = temp2.next;
            }
            end = true;
            temp1 = temp1.next;
        }
        return head;
    }
}
